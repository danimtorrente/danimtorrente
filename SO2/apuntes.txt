ARQUITECTURAS MODERNAS
-Controlador i2c, Inter-integrated Circuit, se usa para touchpad, pantallas tactiles, teclados, sensores de huellas dactilares...
-Los laptops usan para el keyboard normalmente el controlador i8042
------------------------------------------------------------------------------------------------------------------------------------
LINKERS (por ejemplo ld)

-El linker combina varios archivos objeto (archivos ya compilados en binario) en un ejecutable, resuelve simbolos y 
 ajusta las direcciones de memoria. Por ejemplo el archivo binario puede tener funciones que hagan referencia a bibliotecas 
 externas, una de las cosas que el linker haria seria coger el trozo de codigo que se usa y integrarlo en el archivo ejecutable 
 resultante

ARCHIVO LDS

-Un archivo lds define la ubicacion de las secciones del kernel en la memoria y controla detalles criticos sobre 
 como se organiza el codigo y los datos. Aqui esta un ejemplo: 

ENTRY(main)
SECTIONS
{
	. = 0x10000; /* system code begins here */
	.text.main :
		{ BYTE(24); /* reserved to store user code management data */
			*(.text.main) }
	.text : {*(.text) }
	.rodata : { *(.rodata) }
	.data : { *(.data) } /* Initialized data */
	.bss : { *(.bss) } /* Not initialized data */
	. = ALIGN(4096); /* task_structs array aligned to page */
	.data.task : { *(.data.task) }
}

EXPLICACION:

ENTRY--> Le dice al linker que el punto de entrada sera la funcion main
SECTIONS--> Dentro de sections defines como quieres que se coloquen diferentes partes del programa en memoria.
	-0x10000 (64kB)--> Indica que el codigo del programa comienza en esta direccion
	-text.main --> subseccion de texto (donde se almacena el codigo) en la que se almacena la funcion main
	-BYTE(24) --> reserva 24 bytes para almacenar datos relacionados con la gestion de codigo de usuario (puede ser usado por el
		sistema operativo para guardar datos de control como punteros o descriptores)
	-*(.text.main) --> Instruye al linker para colocar en esta sección cualquier código que esté en la sección .text.main 
		de los archivos objeto.
	-.text --> Seccion de codigo ejecutable del programa
	-.rodata--> Read Only Data
	-.data--> Datos inicializados como variables globales que ya tienen un valor o datos asi
	-.bss--> Datos no inicializados
	-. = ALIGN(4096)--> Alinea al tamaño de una pagina de 4 KB
	-data.task--> Seccion para los datos relacionados con tareas (procesos o threads)

--------------------------------------------------------------------------------------------------------------------------

TASK_STRUCT ARRAY

union task_union task[NR_TASKS] __attribute__((__section__(".data.task")));

	-task_union--> Esto es una unión que el task_struct y otras posibles estructuras o datos asociados a las tareas.

    task[NR_TASKS]--> Es un array de tamaño NR_TASKS (un número máximo de tareas predefinido). 
	Cada elemento del array es una instancia de la unión task_union, que representa una tarea (proceso o hilo) en el sistema.

    __attribute__((__section__(".data.task")))--> Esto indica al compilador que debe colocar este array en una sección especial 
	de la memoria llamada .data.task. Esta sección está definida en el script del linker (.lds) y fue alineada a una 
	página de memoria (4096 bytes) lo cual es importante en sistemas operativos para asegurar que las estructuras críticas 
(como las de planificación de tareas) estén alineadas en la memoria para mejorar la eficiencia de acceso y el uso de la caché.

TASK_STRUCT

El task_struct es la estructura que contiene toda la información sobre un proceso o tarea, como:

	-PID (Identificador del proceso)
	-Estado de la tarea (corriendo, detenido, en espera, etc.)
	-Punteros a los registros (para restaurar el contexto de la CPU cuando se programa la tarea)
	-Dirección de memoria (dónde está cargado el proceso en la memoria)
	-Contadores de tiempo (para la planificación por tiempos)
	-Referencias a archivos abiertos, señales, etc.

El array task[] contiene todas las tareas o procesos en el sistema. Es como una lista que el sistema operativo usa para hacer un 
seguimiento de los procesos activos, programarlos, o eliminarlos.

------------------------------------------------------------------------------------------------------------------------------------
Llamadas a sistema:
	-Gestion de Procesos:
		-getpid
		-fork
		-exit
		-exec
	-Gestion de Memoria:
		-malloc
		-free
		-brk/sbrk
	-I/O & filesystem
		-open
		-read
		-write
		-close
		-lseek
		-mknod
	-Soporte para multithreads/multiprocess
		-pthreads_*
		-signal
		-kill
		-pipe
		-socket
		-sem_*
		-clone

AQUITECTURA (X86)

     CPU Registers:
                -ss (stack segment): apunta al segmento de la pila
                -esp (extended stack pointer): contiene la direccion actual del tope de la pila
                -psw (program status word o EFLAGS en x86): contiene flags que describen el estado actual 
							    del procesador(overflow, zero...)
                -cs (code segment): apunta al segmento de codigo en memoria, define donde esta el codigo que se ejecuta
                -eip (extended instruction pointer): contiene la direccion de la proxima instruccion que sera ejecutada en la CPU

        General Purpose Registers:
                -EAX-> Se usa para operaciones aritmeticas y de retorno de funciones 
		-EBX, ECX, EDX --> Proposito general, aunque cada uno se suele usar para una cosa diferente
		-ESI-> Apunta al origen de los datos en memoria
		-EDI-> Apunta el destino de los datos en memoria
		-EBP-> Contiene la direccion base de la pila (base pointer)
		-ESP-> Contiene la direccion tope de la pila (stack pointer)
	
	TSS-> estructura hardware que contiene el ss0 y el esp0 de la pila del kernel. Ayuda al cambio de contexto.
	MEMORIA:
	-Tipos (la arquitectura x86 es little endian):
		-Big endian-> el byte menos significativo se almacena primero en la direccion de memoria mas baja
		-Little endian->  el byte mas significativo se almacena primero en la direccion de memoria mas baja

	ASSEMBLER RULES:
	-Seccion: .data -> variables inicializadas
	-Seccion: .bss -> varibales sin inicializar
	-Seccion: .txt -> codigo
	-GLOBAL-> termino que se usa para declarar simbolos como funciones o variables que seran accesibles desde otros archivos de 
		de codigo o por el enlazador.
	-ETIQUETAS-> nombre:, sirve para referirse a una parte del codigo // etiquetas en datos: tipico-> msg db ... Aqui msg es una
		etiqueta que hace referncia a la cadena de texto o numeros siguiente.
 	-DEFINICION DE DATOS:
		-db->Define byte
		-dw->Define word
		-dd->Define double word
		-Para hacer una cadena de texto al final hay que añadir un byte nulo (0) para marcar que la cadena termina.
	-SUBRUTINAS: Los parametros de las funciones se pasan a traves de la pila (a partir de la direccion 8(%ebp)) y el valor de 
	 retorno se pasa a traves de eax.
		- Gestion de la pila
			-Se salva en la pila ebp, y se actualiza su valor con el valor de esp
			-Luego se le resta a esp el valor de las variables locales de la funcion. Van a la pila antes de ebp, es decir
			 antes de la direccion 0 de la pila. La primera variable va mas arriba
			-Pushl de los registros ebx, esi, edi. Pushl guarda el valor de un registro en la posicion de la pila a la que
			 apunta esp y actualiza esp para que siga apuntando al tope de la pila
			-Luego deshacer el proceso, sumar variables locales a esp, devolver el valor a los registros con popl, 
			 actualizar esp y salvar ebp con popl, y finalmente ret

EJEMPLO DE CODIGO: 
	
	section .data
	    msg db 'Hola mundo', 0    ; Cadena de texto con terminador nulo
	
	section .bss
	    buffer resb 64            ; Reserva 64 bytes de espacio sin inicializar
	
	section .text
	    global _start             ; Punto de entrada del programa
	
	_start:
	    ; Llamada al sistema para escribir el mensaje (usando la interrupción 0x80 en Linux)
	    mov eax, 4                ; Número de la llamada al sistema: sys_write
	    mov ebx, 1                ; File descriptor: 1 (stdout)
	    mov ecx, msg              ; Dirección del mensaje
	    mov edx, 11               ; Longitud del mensaje (11 caracteres)
	    int 0x80                  ; Interrupción para la llamada al sistema
	
	    ; Llamada al sistema para salir
	    mov eax, 1                ; Número de la llamada al sistema: sys_exit
	    xor ebx, ebx              ; Código de salida: 0
	    int 0x80                  ; Interrupción para la llamada al sistema

	-INSTRUCCIONES ASSEMBLER INTERESANTES DEL X86(IA32 (Intel Arquitecture 32))
		-CLI -> In most cases, CLI clears the IF flag in the EFLAGS register and no other flags are affected. Clearing the IF flag
		causes the processor to ignore maskable external interrupts. 
		-
------------------------------------------------------------------------------------------------------------------------------------
MANEJO DE INTERRUPCIONES --> Salta una interrupcion, el procesador consulta la IDT para determinar la direccion del handler 
correspondiente, cambio de contexo (el procesador guarda el estado actual del sistema (flags, registros...) en la pila, i cambia
al modo de ejecucion del nivel de privilegio correspondiente), el procesador usa la GDT para conseguir el codigo y datos necesarios,
se ejecuta el HANDLER, se restaura al contexto anterior y su nivel de privilegios, finalmente el procesador usa IRET (interrupt 
return), que indica que hay que restaurar el puntero de la instruccion original.

Interrupts--> Asynchronous, producido por otros dispositivos hardware de forma inesperada

Exceptions--> Synchronous, interrupciones generadas por la CPU despues de terminar una instruccion

Systemcalls--> Synchronous, lo causa una instruccion de assembler. Es una llamada al kernel des de un programa de usuario para 
	       ejecutar una intruccion de sistema que solo puede ejecutar el kernel. En los pc mas antiguos se usa int, en los
	       mas modernos se usa sysenter.

	-int --> Abreviatura de interrupt, se usa int + entrada IDT. Por lo general es int 0x80. Luego en los diferentes 
		registros se guardan valores necesarios:
			-EAX-> Especifica el tipo de funcion del kernel que se hara (read, write...)
			-EBX-> Descriptor de archivo (0;stdin(teclado), 1;stdout(pantalla), 2;stderr(error))
			-ECX-> Direccion del mensaje (¿suele ser la etiqueta msg?)
			-EDX-> Longitud del mensaje

	-Sysenter/sysexit--> Mecanismo de gestion de interrupciones que se salta el vector de interrupciones (IDT).
		     Usa los siguientes registros:
			-SYSENTER_CS_MSR--> Selector de segmento de codigo del kernel
			-SYSENTER_EIP_MSR--> Contiene el entry point, la direccion de memoria donde comienza la ejecucion en el 
					     kernel cuando se invoca sysenter
			-SYSENTER_ESP_MSR--> Apunta a la base de la TSS (Task State Segment). Esta contiene informacion sobre el 
					     estado de una tarea o proceso, incluyendo el puntero de la pila (ESP) y el ss del kernel.
		     Cuando termina la ejecucion, se devuelve el control al usuario con la instruccion sysexit

IDT (Interrupt Descriptor table) --> Cada entrada tiene un puntero al handler, un nivel de privilegio minimo necesario
	-256 entradas: 
		-0-31 Excepciones (generadas por la cpu, cuando se divide entre cero o cosas asi)
		-32-47 Masked/hardware Interrupts (interrupciones hardware, se las llama masked porque si llegan en un momento 
			critico, se enmascaran/deshabilitan temporalmente hasta que se puedan tratar)
		-48-255 Software Interrupts (un programa que contenga llamadas a sistema)

GDT (Global Descriptor table) --> Contiene descriptores de segmentos de codigo en memoria. Su direccion, 
					   tamaño, privilegios...

Handler--> Funcion que trata una interrupcion
	-Exception handler:
		-Save hardware context
		-Call exception service routine
		-Restore hardware context
		-Remove error code (if present) from kernel stack
		-Return to user (IRET)
	-Interrupt handler:
		-Save hardware context
		-End Of Interruption (EOI)
		-Call exception service routine
		-Restore hardware context
		-IRET
	-System call handler (type of software interrupt):
		-Save hardware context and prepare parameters
		-Execute system call service routine
		-Update kernel context with the system call result
		-Restore hardware context
		-IRET

Wrapper--> Funcion que sirve de intermediario para simplificar una operacion compleja, como una llamada al sistema operativo
	Ejemplo de wrapper para la llamada a sistema write en lenguaje C: 
		-ssize_t write(int fd, const void *buf, size_t count);

Internamente, este wrapper en C invocará la llamada al sistema de bajo nivel que podría usar int 0x80 o sysenter/syscall

Pilas--> Cada proceso tiene 2 pilas, una de usuario y otra de kernel. La de usuario esta en el espacio de memoria de usuario, y la 
	del kernel esta en el espacio de direcciones del kernel, separada de la de usuario. Estas pilas tienen campos como ss y esp,
	tanto la de kernel (ss0, esp0) como la de usuario, y estos campos se guardan en el task struct, de forma que cuando a un proceso le toca
	ejecutarse en la cpu, se cargan todos los datos, registros, memoria... Dentro del propio task struct, los apartados relacionados
	con el kernel, solo se pueden acceder cuandoo tienes privilegios suficientes. Hay un task_array donde cada elemento es un 
	task_struct.
------------------------------------------------------------------------------------------------------------------------------------
Para windows la gestion es un poco diferente. La direccion de idt para las sistemcalls con int es 0x2e, y en vez de pasar todos
los parametros en los registros, solo pasa un puntero con la direccion de memoria donde estaran todos los parametros.
